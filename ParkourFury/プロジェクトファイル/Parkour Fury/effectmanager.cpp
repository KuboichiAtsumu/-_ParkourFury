////==============================================================================================================================================
////
//// エフェクト管理
//// Author : Atsumu Kuboichi
////
////==============================================================================================================================================
//
////===========================================================================================================
//// ヘッダーインクルード
////===========================================================================================================
//#include <EffekseerForDXLib_170e_324b/VC/DxLib.h>
//#include "effectmanager.h"
//
////===========================================================================================================
//// コンストラクタ
////===========================================================================================================
//CEffectManager::CEffectManager() : CObjectManager(),
//	m_nEffectResourceHandle(-1),
//	m_nPlayingEffectHandle(-1),
//	m_nPlayCount(0)
//{
//}
//
////===========================================================================================================
//// デストラクタ
////===========================================================================================================
//CEffectManager::~CEffectManager()
//{
//}
//
////===========================================================================================================
//// 初期化処理
////===========================================================================================================
//HRESULT CEffectManager::Init()
//{
//	//オブジェクトマネージャー初期化処理
//	if (FAILED(CObjectManager::Init()))
//	{
//		return E_FAIL;
//	}
//
//	SetUseDirect3DVersion(DX_DIRECT3D_9);
//
//	// 引数には画面に表示する最大パーティクル数を設定する。
//	if (Effkseer_Init(EffectParticleLimit) == -1) { DxLib_End(); }
//
//	// フルスクリーンウインドウの切り替えでのリソース削除防止
//	SetChangeScreenModeGraphicsSystemResetFlag(FALSE);
//
//	// DXライブラリのデバイスロストした時のコールバックを設定
//	Effekseer_SetGraphicsDeviceLostCallbackFunctions();
//
//	//Zバッファを有効
//	SetUseZBuffer3D(TRUE);
//
//	//Zバッファへの書き込み有効
//	SetWriteZBuffer3D(TRUE);
//
//	return S_OK;
//}
//
////===========================================================================================================
//// 終了処理
////===========================================================================================================
//void CEffectManager::Uninit()
//{
//	//オブジェクトマネージャー終了処理
//	CObjectManager::Uninit();
//
//	//エフェクトリソースの開放
//	DeleteEffekseerEffect(m_nEffectResourceHandle);
//}
//
////===========================================================================================================
//// 更新処理
////===========================================================================================================
//void CEffectManager::Update()
//{
//	////先頭アドレスを取得する
//	//CArea* pArea = m_pTop;
//
//	////オブジェクト情報がnullptrになるまで繰り返す
//	//while (pArea != nullptr)
//	//{
//	//	//次のオブジェクト情報を取得
//	//	CArea* pNext = pArea->GetNextArea();
//
//	//	//エリア情報が存在する場合
//	//	//削除フラグがtrueの場合
//	//	if (pArea != nullptr && pArea->GetDeleteFlag())
//	//	{
//	//		//前のオブジェクト情報を取得
//	//		CArea* pPrev = pArea->GetPrevArea();
//
//	//		//前のオブジェクト情報が存在する場合
//	//		if (pPrev != nullptr)
//	//		{
//	//			//次のオブジェクト情報を繋ぐ
//	//			pPrev->SetNextArea(pNext);
//	//		}
//	//		//前のオブジェクト情報が存在しない場合
//	//		else
//	//		{
//	//			//次ののオブジェクト情報の前のオブジェクト情報をnullptrに設定
//	//			pNext->SetPrevArea(nullptr);
//
//	//			//先頭アドレスを変更
//	//			m_pTop = pNext;
//	//		}
//
//	//		//次のオブジェクト情報が存在する場合
//	//		if (pNext != nullptr)
//	//		{
//	//			//前のオブジェクト情報を繋ぐ
//	//			pNext->SetPrevArea(pPrev);
//	//		}
//	//		//次のオブジェクト情報が存在しない場合
//	//		else
//	//		{
//	//			//前のオブジェクト情報の次のオブジェクト情報をnullptrに設定
//	//			pPrev->SetNextArea(nullptr);
//
//	//			//終端アドレスを変更
//	//			m_pCur = pPrev;
//	//		}
//	//	}
//
//	//	//オブジェクト情報を次の情報に変更する
//	//	pArea = pNext;
//	//}
//
//	//定期的にエフェクトを再生する
//	if (!(m_nPlayCount % EffectPlayInterval))
//	{
//		// エフェクトを再生する。
//		m_nPlayingEffectHandle = PlayEffekseer3DEffect(m_nEffectResourceHandle);
//	}
//
//	//再生カウントを進める
//	m_nPlayCount++;
//
//	//Effekseerにより再生中のエフェクトを更新する
//	UpdateEffekseer3D();
//}
//
////===========================================================================================================
//// 描画処理
////===========================================================================================================
//void CEffectManager::Draw()
//{
//	DrawEffekseer3D();
//}
//
////===========================================================================================================
//// 読込処理
////===========================================================================================================
//void CEffectManager::Load()
//{
//	// エフェクトのリソースを読み込む
//	m_nEffectResourceHandle = LoadEffekseerEffect(EffectFilePath, EffectSize);
//}
