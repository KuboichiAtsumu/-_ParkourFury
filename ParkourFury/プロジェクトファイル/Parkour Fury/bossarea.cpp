//==============================================================================================================================================
//
// ボスエリア処理
// Author : Atsumu Kuboichi
//
//==============================================================================================================================================

//===========================================================================================================
// ヘッダーインクルード
//===========================================================================================================
#include "bossarea.h"

//===========================================================================================================
// コンストラクタ
//===========================================================================================================
CBossArea::CBossArea() : CArea()
{
}

//===========================================================================================================
// デストラクタ
//===========================================================================================================
CBossArea::~CBossArea()
{
}

//===========================================================================================================
// 初期化処理
//===========================================================================================================
HRESULT CBossArea::Init()
{
	//基底クラス初期化処理
	if (FAILED(CArea::Init()))
	{
		return E_FAIL;
	}

	return S_OK;
}

//===========================================================================================================
// 終了処理
//===========================================================================================================
void CBossArea::Uninit()
{
	//基底クラス終了処理
	CArea::Uninit();
}

//===========================================================================================================
// 解放処理
//===========================================================================================================
void CBossArea::Release()
{
	//基底クラス解放処理
	CArea::Release();
}

//===========================================================================================================
// 更新処理
//===========================================================================================================
void CBossArea::Update()
{
	//基底クラス更新処理
	CArea::Update();
}

//===========================================================================================================
// 描画処理
//===========================================================================================================
void CBossArea::Draw()
{
}

//===========================================================================================================
// 当たり判定
//===========================================================================================================
#include "game.h"
#include "player.h"
#include "boss.h"
bool CBossArea::Collision(D3DXVECTOR3 pos)
{
	//当たり判定フラグ
	bool bCollision = false;

	//当たり判定がtrueの場合
	if (CArea::Collision(pos))
	{
		//ローカル変数宣言
		CCamera* pCamera = CManager::GetInstance()->GetCamera();//カメラの情報
		D3DXVECTOR3 BossAreaPos = GetPos();//現在の座標
		CPlayer* pPlayer = nullptr;//プレイヤーへのポインタ
		CBoss* pBoss = nullptr;//ボスへのポインタ
		D3DXVECTOR3 PlayerPos = {};//プレイヤー座標
		D3DXVECTOR3 BossPos = {};//ボス座標

		//プレイヤーカテゴリーのオブジェクト情報を取得
		CObject* pFindPlayer = CObject::FindObject(CObject::Category::PLAYER);

		//オブジェクト情報が存在する場合
		if (pFindPlayer != nullptr)
		{
			//プレイヤークラスにダウンキャスト
			pPlayer = CObject::DownCast<CPlayer, CObject>(pFindPlayer);

			//ダウンキャスト成功
			if (pPlayer != nullptr)
			{
				//プレイヤー座標取得
				PlayerPos = pPlayer->GetPos();
			}
			//ダウンキャスト失敗
			else
			{
				//処理を抜ける
				return false;
			}
		}
		//オブジェクト情報が存在しない場合
		else
		{
			//処理を抜ける
			return false;
		}

		//ボスカテゴリーのオブジェクト情報を取得
		CObject* pFindBoss = CObject::FindObject(CObject::Category::BOSS);

		//オブジェクト情報が存在する場合
		if (pFindBoss != nullptr)
		{
			//プレイヤークラスにダウンキャスト
			pBoss = CObject::DownCast<CBoss, CObject>(pFindBoss);

			//ダウンキャスト成功
			if (pBoss != nullptr)
			{
				//プレイヤー座標取得
				BossPos = pBoss->GetPos();
			}
			//ダウンキャスト失敗
			else
			{
				//処理を抜ける
				return false;
			}
		}
		//オブジェクト情報が存在しない場合
		else
		{
			//処理を抜ける
			return false;
		}

		//Y座標を調整
		PlayerPos.y += pPlayer->GetSize().y * 0.5f;
		BossPos.y += pBoss->GetSize().y * 0.5f;

		//カメラの注視点をプレイヤーとボスの間に設定
		D3DXVECTOR3 CameraPosR = (PlayerPos + BossPos) * 0.5f;

		//注視点をボスエリアの中央に設定
		pCamera->SetPosR(CameraPosR);

		//プレイヤーとボスの距離に合わせてカメラの距離を計算
		float fDistance = sqrtf(powf((PlayerPos.y - BossPos.y), 2.0f) + powf((PlayerPos.z - BossPos.z), 2.0f)) * 0.5f + CAMERA_MIN_DISTANCE;

		//最大値を超えないように調整
		if (fDistance > CAMERA_MAX_DISTANCE) fDistance = CAMERA_MAX_DISTANCE;

		//視点の座標をボスエリアと平行にする
		pCamera->SetPosV({ CameraPosR.x - fDistance , CameraPosR.y, CameraPosR.z });

		//当たり判定をtrueにする
		bCollision = true;
	}

	return bCollision;
}
